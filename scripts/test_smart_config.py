"""
Teste r√°pido da configura√ß√£o inteligente de Deep Research

Valida:
1. Detec√ß√£o de complexidade
2. Configura√ß√£o din√¢mica de steps
3. Fallback autom√°tico em caso de timeout
"""

import sys
import os
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent.parent))

from agent.integrations.research_config import get_research_config, ResearchConfig, TopicComplexity


def test_complexity_detection():
    """Testa detec√ß√£o de complexidade."""
    print("\n" + "="*80)
    print("üß™ TESTE 1: DETEC√á√ÉO DE COMPLEXIDADE")
    print("="*80 + "\n")
    
    config = ResearchConfig()
    
    test_cases = [
        ("Status do projeto X", TopicComplexity.SIMPLE),
        ("An√°lise do novo processo de onboarding", TopicComplexity.MODERATE),
        ("Estrat√©gia de transforma√ß√£o digital para 2025", TopicComplexity.COMPLEX),
        ("Decis√£o cr√≠tica sobre arquitetura de IA", TopicComplexity.COMPLEX),
    ]
    
    for topic, expected in test_cases:
        detected = config.detect_complexity(topic)
        status = "‚úÖ" if detected == expected else "‚ùå"
        print(f"{status} '{topic}'")
        print(f"   Esperado: {expected.value} | Detectado: {detected.value}\n")


def test_optimal_config():
    """Testa configura√ß√£o √≥tima."""
    print("\n" + "="*80)
    print("üß™ TESTE 2: CONFIGURA√á√ÉO √ìTIMA")
    print("="*80 + "\n")
    
    test_cases = [
        {
            "topic": "Status do projeto",
            "intent": "status",
            "expected_max": 3
        },
        {
            "topic": "Transforma√ß√£o digital e inova√ß√£o",
            "intent": "decision",
            "expected_max": 5  # Limited by DEEPRESEARCH_MAX_STEPS=5
        },
        {
            "topic": "Reuni√£o de alinhamento trimestral",
            "intent": "alignment",
            "expected_max": 5
        }
    ]
    
    config = ResearchConfig(max_steps=5, fallback_steps=3)
    
    for test in test_cases:
        optimal = config.get_optimal_config(
            topic=test["topic"],
            intent=test["intent"]
        )
        
        print(f"üìù T√≥pico: {test['topic']}")
        print(f"   Intent: {test['intent']}")
        print(f"   Complexidade: {optimal['complexity']}")
        print(f"   Steps: {optimal['max_steps']} (fallback: {optimal['fallback_steps']})")
        print(f"   Timeout: {optimal['timeout']}s")
        print(f"   Reasoning: {optimal['reasoning']}")
        
        if optimal['max_steps'] <= test['expected_max']:
            print(f"   ‚úÖ Steps dentro do esperado (<= {test['expected_max']})")
        else:
            print(f"   ‚ùå Steps acima do esperado ({optimal['max_steps']} > {test['expected_max']})")
        
        print()


def test_should_use_deep_research():
    """Testa decis√£o de usar Deep Research."""
    print("\n" + "="*80)
    print("üß™ TESTE 3: DECIS√ÉO DE USO")
    print("="*80 + "\n")
    
    test_cases = [
        {
            "topic": "Status do projeto",
            "facts_count": 2,
            "should_use": True,
            "reason": "poucos facts"
        },
        {
            "topic": "Status do projeto",
            "facts_count": 10,
            "should_use": False,
            "reason": "facts suficientes"
        },
        {
            "topic": "Estrat√©gia de IA para 2025",
            "facts_count": 5,
            "should_use": True,
            "reason": "t√≥pico complexo"
        },
        {
            "topic": "Estrat√©gia de IA para 2025",
            "facts_count": 12,
            "should_use": True,
            "reason": "t√≥pico complexo mesmo com facts"
        }
    ]
    
    for test in test_cases:
        decision = get_research_config(
            topic=test["topic"],
            intent="alignment",
            internal_facts_count=test["facts_count"]
        )
        
        print(f"üìù T√≥pico: {test['topic']}")
        print(f"   Facts: {test['facts_count']}")
        print(f"   Decis√£o: {'‚úÖ Usar' if decision['should_use'] else '‚ùå N√£o usar'}")
        print(f"   Motivo: {decision['reason']}")
        
        if decision['should_use'] == test['should_use']:
            print(f"   ‚úÖ Decis√£o correta")
        else:
            print(f"   ‚ùå Decis√£o incorreta (esperado: {test['should_use']})")
        
        print()


def test_time_budget():
    """Testa restri√ß√£o de tempo."""
    print("\n" + "="*80)
    print("üß™ TESTE 4: TIME BUDGET")
    print("="*80 + "\n")
    
    config = ResearchConfig(max_steps=10)  # Sem limite de steps
    
    test_cases = [
        ("Estrat√©gia complexa", 120, 3),   # 120s = ~3 steps
        ("Estrat√©gia complexa", 240, 6),   # 240s = ~6 steps
        ("Estrat√©gia complexa", 400, 10),  # 400s = ~10 steps
    ]
    
    for topic, budget, expected_max_steps in test_cases:
        optimal = config.get_optimal_config(
            topic=topic,
            intent="decision",
            time_budget=budget
        )
        
        print(f"üìù Budget: {budget}s")
        print(f"   Steps: {optimal['max_steps']} (esperado: <= {expected_max_steps})")
        print(f"   Timeout: {optimal['timeout']}s")
        
        if optimal['max_steps'] <= expected_max_steps:
            print(f"   ‚úÖ Steps ajustados corretamente")
        else:
            print(f"   ‚ùå Steps n√£o ajustados ({optimal['max_steps']} > {expected_max_steps})")
        
        print()


def main():
    """Executa todos os testes."""
    print("\n" + "="*80)
    print("üöÄ TESTE DE CONFIGURA√á√ÉO INTELIGENTE - DEEP RESEARCH")
    print("="*80)
    
    try:
        test_complexity_detection()
        test_optimal_config()
        test_should_use_deep_research()
        test_time_budget()
        
        print("\n" + "="*80)
        print("‚úÖ TODOS OS TESTES COMPLETADOS")
        print("="*80 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
